---
import { newAppContainer } from "@backend/backend";
import type { SelectChannelEntity } from "@backend/package/database/entity/channel.entity";
import type { MessageRepository } from "@backend/package/database/repository/message.repository";
import ChannelList from "src/components/svelte/ChannelList.svelte";
import { z } from "zod";
import Channel from "../../components/astro/Channel.astro";
import Layout from "../../layouts/Layout.astro";
import { Optional } from "typescript-optional";

const ParamSchema = z.object({
  channelId: z
    .string()
    .regex(/[a-zA-Z0-9]/)
    .min(1),
});

let channelId: string = "";
let channels: SelectChannelEntity[] = [];
let channel: Optional<SelectChannelEntity> = Optional.empty();
let messages: Awaited<ReturnType<MessageRepository["findMessagesByChannel"]>> =
  [];

try {
  const appContainer = newAppContainer();
  const session = await appContainer
    .getUserSession(Astro.cookies)
    .GetUserFromSession();

  if (session.isEmpty()) {
    console.log(`No Session found`);
    return Astro.redirect("/auth");
  }

  channelId = ParamSchema.parse(Astro.params).channelId;
  channels = await appContainer.getChannelRepository().findChannels();
  channel = Optional.ofNullable(channels.find(({ id }) => id === channelId));

  if (channel.isPresent()) {
    messages = await appContainer
      .getMessageRepository()
      .findMessagesByChannel(channelId);
  }
} catch (e) {
  console.error(e);
}

if (channel.isEmpty()) {
  return Astro.redirect("/channel");
}
---

<Layout title={`Channel ${channel.get().name || ""}`}>
  <div class="h-screen">
    <div class="flex flex-row h-full w-3/5 mx-auto">
      <ChannelList
        client:load
        currentId={channel.get().id}
        channels={channels.map((c) => ({
          id: channel.get().id,
          name: channel.get().name,
        }))}
      />

      <Channel
        channel={{
          id: channel.get().id,
          name: channel.get().name,
        }}
        messages={messages.map((m) => ({
          id: m.id,
          authorName: m.user.name,
          content: m.content,
          createdAt: m.createdAt,
        }))}
      />
    </div>
  </div>
</Layout>
